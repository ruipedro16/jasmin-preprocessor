inline fn id(reg u32 a) -> reg u32 {
    return a;
}

// F is ignored (not used in the function)
// TODO: Maybe support fn<N>[; TYPE](...) -> ... { ... }
inline fn id_array<N>[F; TYPE](reg ptr TYPE[N] a) -> reg ptr TYPE[N]
{
    inline int i;
    reg TYPE t;
    for i = 0 to N
    {
        
    }
    return a;
}//<>

inline fn foo<N>[F;TYPE1](reg ptr TYPE1[N] a) -> reg ptr TYPE1[N]
{
    reg TYPE u;
    inline int i;
    for i = 0 to N
    {
        u = F(a[i]);
        a[i] = u;
    }

    a = id_array<N>[F;TYPE1](a);

    return a;
}//<>

export fn test(reg u64 _a) {
    stack u32[4] a;
    reg ptr u32[4] ap;
    reg u64 u;

    ap = a;
    ap = foo<4>[id;u32](ap);
    a = ap;

    u = (64u) a[2];
    [_a] = u;
}
