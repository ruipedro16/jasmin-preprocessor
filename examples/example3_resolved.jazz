inline fn zero(reg u8 a) -> reg u32, reg u64 {
  reg u32 z32;
  reg u64 z64;
  z32 = 0;
  z64 = 0;
  return z32, z64;
}

inline fn __mapto2_zero_u32_u64_u8_4_2(
  reg ptr u32[4] r1,
  reg ptr u64[4] r2,
  reg const ptr u8[4] a)
  ->
  reg ptr u32[4],
  reg ptr u64[4]
{
  reg u32 i;
  inline int j;
  reg u32 elem_r1;
  reg u64 elem_r2;
  reg u8  elem_a;

  i = 0;
  while(i < (4 / 2) )
  {
    for j=0 to 2
    {
      elem_a = a[(int) i];
      elem_r1, elem_r2 = zero(elem_a);
      r1[(int) i] = elem_r1;
      r2[(int) i] = elem_r2;
      i += 1;
    }
  }

  for j=0 to (4 % 2)
  {
    elem_a = a[(int) i];
    elem_r1, elem_r2 = zero(elem_a);
    r1[(int) i] = elem_r1;
    r2[(int) i] = elem_r2;
    i += 1;
  }

  return r1, r2;
}

export fn test(reg u64 _a) {
    stack u32[4] a;
    stack u64[4] b;
    stack u8[4] c;

    reg ptr u32[4] ap;
    reg ptr u64[4] bp;
    reg ptr u8[4] cp;

    inline int i;
    reg u32 t;

    for i = 0 to 4 {
        t = (32u)[_a + 4 * i];
        a[i] = t;
    }
    
    b[0] = 1; b[1] = 2; b[2] = 3; b[3] = 4;
    c[0] = 1; c[1] = 2; c[2] = 3; c[3] = 4;

    ap = a;
    bp = b;
    cp = c;

    ap, bp = __mapto2_zero_u32_u64_u8_4_2(ap, bp, cp);

    a = ap;
    b = bp;
    c = cp;

    for i = 0 to 4 {
        t = a[i];
        (u32)[_a + 4 * i] = t;
    }
}
