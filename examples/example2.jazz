inline fn add2(reg u32 r) -> reg u32 { r = r+2; return r; }

inline fn __map<N, ITER>[F;TYPE](reg ptr TYPE[N] a) -> reg ptr TYPE[N]
{
  reg u32 i;
  inline int j;
  reg TYPE elem;

  i = 0;
  while(i < (N / ITER) )
  {
    for j=0 to ITER
    {
      elem = a[(int) i];
      elem = F(elem);
      a[(int) i] = elem;
      i += 1;
    }
  }

  for j=0 to (N % ITER)
  {
    elem = a[(int) i];
    elem = F(elem);
    a[(int) i] = elem;
    i += 1;
  }

  return a;
}//<>

export fn test(reg u64 _a) {
    stack u32[4] a;
    reg ptr u32[4] ap;
    reg u32 t;
    inline int i;

    for i = 0 to 4 {
        t = (32u)[_a + 4 * i];
        a[i] = t;
    }

    ap = a;
    ap = __map<4,2>[add2;u32](ap);
    a = ap;

    for i = 0 to 4 {
        t = a[i];
        (u32)[_a + 4 * i] = t;
    }
}
