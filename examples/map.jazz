// [list of function names ; list of types]

inline fn __add1(reg u32 a) -> reg u32 
{ 
  a = a + 1;
  return a;
}

inline fn __add2(reg u32 a) -> reg u32 { a+=2; return a; }

inline fn __map<N>[F, TYPE](reg ptr TYPE[N] a) -> reg ptr TYPE[N]
{
  reg u32 i;
  inline int j;
  reg TYPE elem;

  i = 0;
  while(i < N)
  {
    a[(int) i] = F(a[(int) i]);
  }

  return a;
}//<>

inline fn __map_add2<4>(reg ptr u32[4] a) -> reg ptr u32[4]
{
  a = __map<4>[__add2, u32](a);
  return a;
}

export fn test_map_add_1(reg u64 _a) // 4 element array
{
  inline int i;
  reg u32 t;
  stack u32[4] a;
  reg ptr u32[4] ap;

  for i = 0 to 4
  {
    t = (u32)[_a + 4*i];
    a[i] = t;
  }

  ap = a;
  ap = __map<4>[__add1, u32](ap);
  a = ap;

  for i = 0 to 4
  {
    t = a[i];
    (u32)[_a + 4*i] = t;
  }
}
