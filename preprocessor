#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sys
import pprint

import argparse
from argparse import Namespace

import utils
from env import Env
from generic_fn import GenericFn
from task import Task


def parse_args() -> Namespace:
    """Parse CLI arguments"""
    parser = argparse.ArgumentParser(description="Jasmin source code preprocessor")

    parser.add_argument(
        "--input_file",
        "-in",
        required=True,
        help="Input file path",
        type=str,
    )

    parser.add_argument(
        "--output_file",
        "-out",
        required=False,
        help="Output file path",
        type=str,
    )

    parser.add_argument(
        "--arch",
        required=False,
        type=str,
        default="x86-64",
        choices=["x86-64", "arm-m4"],
        help="Target architecture (default is x86-64)",
    )

    parser.add_argument(
        "-d",
        "--debug",
        help="Enable debugging",
        action="store_true",  # Makes -d a flag without an argument
    )

    parser.add_argument(
        "--after_macro",
        help="Prints the program after replacing #expand macros",
        action="store_true",  # Makes a flag without an argument
    )

    parser.add_argument(
        "--after_rm_generic",
        help="Prints the program after removing the generic functions from the source code",
        action="store_true",  # Makes a flag without an argument
    )

    parser.add_argument(
        "--after_tasks",
        help="Prints the program after resolving the tasks",
        action="store_true",  # Makes a flag without an argument
    )

    parser.add_argument(
        "--after_generic_fn_calls",
        help="Prints the program after resolving generic function calls",
        action="store_true",  # Makes a flag without an argument
    )

    parser.add_argument("--task", required=False, nargs="+")

    parser.add_argument(
        "--workers",
        help="Number of worker threads for finding subtask concurrently",
        type=int,
        required=False,
    )

    return parser.parse_args()


def resolve_templates(
    text: str,
    env: Env,
    args: Namespace,
) -> str:
    # TODO: FIXME: I dont remember why we need these firrst two steps

    # 1st step: Update global params dict. The source file may define new
    # `param int` variables or override previously defined ones
    tmp: dict[str, int] = utils.get_params(text)
    env.global_params.update(tmp)

    # 2nd step: Update generic functions dict from Jasmin source code
    tmp: dict[str, GenericFn] = utils.get_generic_fn_dict(text)  # Also includes higher order functions
    env.generic_functions.update(tmp)

    # 3rd step: Remove the code of the generic functions from the source code
    text = utils.remove_functions_from_text(text)

    if args.after_rm_generic:
        print(text)
        sys.exit(0)

    # 4th step: Replace calls to generic functions with calls to concrete functions
    text = utils.replace_function_calls(text, env)

    # 5th step: Get a list of all the tasks that need to be done
    # First, we gather the tasks without handling nested calls, and then, after all
    # the tasks are collected, resolve the nested calls in the Task class.
    # This needs to be done on the input_text instead of the already processed
    # text
    tasks: list[Task] = export_tasks + utils.get_tasks(input_text, env)

    if args.debug:
        print("Tasks [1st pass]:")
        pprint.pprint(tasks)
        print("\n", end="")

    if args.debug and args.workers:
        print(f"# Workers: {args.workers}")

    if args.workers:
        tasks: list["Task"] = utils.find_sub_tasks_sequentially(tasks, env)
    else:
        tasks: list["Task"] = utils.find_sub_tasks_sequentially(tasks, env)

    if args.debug:
        print("Tasks [2nd pass (includes subtasks)]:")
        pprint.pprint(tasks)
        print("\n", end="")

        # Remove duplicate tasks
    tasks = utils.remove_duplicates(tasks)

    if args.debug:
        print("Tasks [3rd pass (removes duplicate tasks)]:")
        pprint.pprint(tasks)
        print("\n", end="")

    # See if there is any invalid task
    utils.validate_tasks(tasks)

    # 6th step: Resolve each task
    for task in tasks:
        text = task.resolve(text, env)

    if args.after_tasks:
        print(text)
        sys.exit(0)

    # 7th step: Resolve generic function calls that were not resolved before
    text = utils.resolve_generic_fn_calls(text, env)

    if args.after_generic_fn_calls:
        print(text)
        sys.exit(0)

    # Last step: Remove extra blank space & remove auxiliary comments
    pattern = r"// Place concrete instances of the (\w+) function here"
    text = re.sub(pattern, "", text)

    pattern = r"\n{3,}"
    while re.search(pattern, text):
        text = re.sub(pattern, "\n\n", text)

    return text.strip() + "\n"


if __name__ == "__main__":
    # TODO: I don't remember why we need python > 3.10 (maybe bc of the type annotations)
    if sys.version_info < (3, 10):
        sys.stderr.write("Python 3.10 or higher is required\n")
        sys.exit(-1)

    try:
        args: Namespace = parse_args()

        if args.debug:
            print(f"Command Line Task (args.task): {args.task}")

        # Check if the input files exists
        if not os.path.exists(args.input_file):
            sys.stderr.write(f"Error: The file '{args.input_file}' does not exist.\n")
            sys.exit(-1)

        with open(args.input_file, "r", encoding="utf-8") as f:
            text: str = f.read()

        # 1st step: Create the global environment
        env: Env = Env(text)

        if args.debug:
            print(f"Environment: {env}")

        export_tasks: list[Task] = utils.parse_tasks(args.task, env)

        if args.debug:
            print("DEBUG: Export tasks: ")
            pprint.pprint(export_tasks)
            print("\n")

        # TODO: I dont remember why we need to read twice
        with open(args.input_file, "r", encoding="utf-8") as f:
            input_text: str = f.read()

        output_text: str = resolve_templates(input_text, env, args)

        output_text = utils.replace_eval_global_params(output_text, env.global_params)

        # Replace usize
        output_text = output_text.replace(
            "usize",
            "u64" if args.arch == "x86-64" else "u32" if args.arch == "arm-m4" else output_text,
        )

        # Replace casts
        output_text = utils.replace_casts(output_text)

        if args.debug:
            print("\n--------------------------------------------------------------\n")

        if args.output_file:
            with open(args.output_file, "w", encoding="utf-8") as f:
                f.write(output_text)
        else:
            print(output_text)

    except KeyboardInterrupt:
        sys.stderr.write("Program interrupted (Ctrl+C)\n")
